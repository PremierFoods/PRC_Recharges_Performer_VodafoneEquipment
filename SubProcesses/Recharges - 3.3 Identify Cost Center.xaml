<Activity mc:Ignorable="sap sap2010" x:Class="AfterResume" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_strInvoiceFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_strTemplatePath" Type="InArgument(x:String)" />
    <x:Property Name="out_strMailBody" Type="OutArgument(x:String)" />
    <x:Property Name="out_strInvoiceDate" Type="OutArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1055.2,3035.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>AfterResume_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Text.Json.Nodes</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Core.Activities.SAP</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Models.CV</x:String>
      <x:String>UiPath.UIAutomationNext.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers</x:String>
      <x:String>UiPath.UIAutomationNext.Activities.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers.Scope</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>System.Text.Json</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Steps done in this workflow:&#xA;1. Read Workings and Active List from Vodafone Equipment Template&#xA;2. Read Tracker from Sharepoint link&#xA;3. Identify Cost Centers based on rules using active list and tracker&#xA;4. Write Cost Center in column CC identified&#xD;&#xA;5. If any missing CC, create body for email containing missing CC, else create body for successful run&#xA;" DisplayName="Recharges - 3.3 Identify Cost Center" sap:VirtualizedContainerService.HintSize="576,2970.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="dtWorkings" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtActiveList" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtTracker" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - Vodafone Usage" sap:VirtualizedContainerService.HintSize="513.6,381.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_strTemplatePath]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,272" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[dtWorkings]" DisplayName="Read Range - Workings" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_4" Range="[in_Config(&quot;VodafoneWorkingsReadRange&quot;).ToString]" SheetName="[in_Config(&quot;VodafoneWorkingsSheetName&quot;).ToString]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ExcelReadRange>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[dtActiveList]" DisplayName="Read Range - Active List" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_5" Range="[in_Config(&quot;VodafoneActiveListReadRange&quot;).ToString]" SheetName="[in_Config(&quot;VodafoneActiveListSheetName&quot;).ToString]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ExcelReadRange>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - Tracker" sap:VirtualizedContainerService.HintSize="513.6,281.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_5" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_Config(&quot;Recharges_VodafoneTracker_SharepointURL&quot;).ToString]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,172" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtTracker]" DisplayName="Read Range - Vodafone" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_6" SheetName="[in_Config(&quot;VodafoneTrackerSheetName&quot;).ToString]" />
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <TryCatch DisplayName="Try - Populate CC identified, Name identified and CC comments" sap:VirtualizedContainerService.HintSize="513.6,325.6" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="For Each row As datarow In io_dtWorkings.Rows&#xA;If Not String.IsNullOrWhiteSpace(row(&quot;PO Number&quot;).ToString) AndAlso String.IsNullOrWhiteSpace(row(&quot;Handset Reference&quot;).ToString) AndAlso String.IsNullOrWhiteSpace(row(&quot;Allocation Code 1/ CC&quot;).ToString) AndAlso String.IsNullOrWhiteSpace(row(&quot;Allocation Code 2&quot;).ToString) &#xA;&#x9;row(&quot;CC identified&quot;) = in_dtTracker.AsEnumerable.Where(Function(x) x(&quot;Supportworks Incident number&quot;).ToString = row(&quot;PO Number&quot;).tostring).CopyToDataTable.Rows.Item(0)(&quot;Cost Centre&quot;).ToString&#xA;&#x9;row(&quot;Name identified&quot;) =  in_dtTracker.AsEnumerable.Where(Function(x) x(&quot;Supportworks Incident number&quot;).ToString = row(&quot;PO Number&quot;).tostring).CopyToDataTable.Rows.Item(0)(&quot;User&quot;).ToString&#xA;&#x9;row(&quot;CC comments&quot;) = &quot;Cost Center &quot;+row(&quot;CC identified&quot;).ToString+ &quot; and Name &quot; +row(&quot;Name identified&quot;).ToString+&quot; extracted using Vodafone &amp; EE mobile - Order tracker.&quot;&#xA;&#x9;Dim strTrackerCostCenter As String = in_dtTracker.AsEnumerable.Where(Function(x) x(&quot;Supportworks Incident number&quot;).ToString = row(&quot;PO Number&quot;).tostring).CopyToDataTable.Rows.Item(0)(&quot;Payroll number&quot;).ToString&#xA;&#x9;If in_dtActiveList.AsEnumerable.Any(Function(x) x(&quot;Pers.No.&quot;).ToString.ToLower.Trim = strTrackerCostCenter)&#xA;&#x9;&#x9;row(&quot;CC identified&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x) x(&quot;Pers.No.&quot;).ToString.tolower.Trim = strTrackerCostCenter).CopyToDataTable.Rows.Item(0)(&quot;CC to use for recharge&quot;).ToString&#xA;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;Cost Center &quot;+row(&quot;CC identified&quot;).ToString+ &quot; and Name &quot; +row(&quot;Name identified&quot;).ToString+&quot; extracted using Vodafone &amp; EE mobile - Order tracker.&quot;,row(&quot;CC Comments&quot;).tostring +&quot; The robot was able to find the Pers.No. in column A, from the Active List, and returned the Cost Center from column H, from the Active List: &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;end if&#xA;Else&#xA;If io_dtWorkings.Rows.IndexOf(row) = 0 And String.IsNullOrWhiteSpace(row(&quot;Allocation Code 2&quot;).tostring) Or row(&quot;Allocation Code 1/ CC&quot;).ToString = &quot;Central Te&quot;&#xA;&#x9;console.WriteLine(&quot;can't extract CC and Name.&quot;)&#xA;&#x9;row(&quot;CC comments&quot;) = &quot;The robot can't extract cost center and name due to missing data.&quot;&#xA;Else&#xA;&#x9;If Not String.IsNullOrWhiteSpace(row(&quot;Allocation Code 2&quot;).tostring)&#xA;&#x9;&#x9;console.WriteLine(&quot;pers no &quot;+ row(&quot;Allocation Code 2&quot;).tostring)&#xA;&#x9;&#x9;If in_dtActiveList.AsEnumerable.Any(Function(x) x(&quot;Pers.No.&quot;).ToString.ToLower.Trim = row(&quot;Allocation Code 2&quot;).ToString.ToLower.Trim)&#xA;&#x9;&#x9;&#x9;row(&quot;CC identified&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x) x(&quot;Pers.No.&quot;).ToString.tolower.Trim = row(&quot;Allocation Code 2&quot;).ToString.ToLower.Trim).CopyToDataTable.Rows.Item(0)(&quot;CC to use for recharge&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;Name identified&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x) x(&quot;Pers.No.&quot;).ToString.tolower.Trim = row(&quot;Allocation Code 2&quot;).ToString.ToLower.Trim).CopyToDataTable.Rows.Item(0)(&quot;Personnel Number&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(Not String.IsNullOrWhiteSpace(row(&quot;CC identified&quot;).ToString),&quot;Value in column K is &quot;+row(&quot;Allocation Code 2&quot;).tostring+&quot;. The robot was able to find the Pers.No. in column A, from the Active List, and returned the Cost Center from column H, from the Active List: &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;console.WriteLine( &quot;The robot copied the cost center from column I: &quot;+row(&quot;Allocation Code 1/ CC&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;&#x9;row(&quot;CC identified&quot;) = row(&quot;Allocation Code 1/ CC&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;Name identified&quot;) = row(&quot;Handset Reference&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = &quot;The robot copied the cost center from column I: &quot;+row(&quot;Allocation Code 1/ CC&quot;).ToString+&quot;.&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;Else If Not String.IsNullOrWhiteSpace(row(&quot;Handset Reference&quot;).ToString)&#xA;&#x9;&#x9;If in_dtActiveList.AsEnumerable.Any(Function(x) x(&quot;Personnel Number&quot;).ToString.ToLower.Trim = row(&quot;Handset Reference&quot;).ToString.ToLower.Trim)&#xA;&#x9;&#x9;&#x9;row(&quot;CC identified&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x) x(&quot;Personnel Number&quot;).ToString.tolower.Trim = row(&quot;Handset Reference&quot;).ToString.ToLower.Trim).CopyToDataTable.Rows.Item(0)(&quot;CC to use for recharge&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;Name identified&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x) x(&quot;Personnel Number&quot;).ToString.tolower.Trim = row(&quot;Handset Reference&quot;).ToString.ToLower.Trim).CopyToDataTable.Rows.Item(0)(&quot;Personnel Number&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(Not String.IsNullOrWhiteSpace(row(&quot;CC identified&quot;).ToString),&quot;Value in column H is &quot;+row(&quot;Handset Reference&quot;).tostring+&quot;. The robot was able to find the Personnel Number in column B, from the Active List, and returned the Cost Center from column H, from the Active List: &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;console.WriteLine( &quot;The robot copied the cost center from column I: &quot;+row(&quot;Allocation Code 1/ CC&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;&#x9;row(&quot;CC identified&quot;) = row(&quot;Allocation Code 1/ CC&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;Name identified&quot;) = row(&quot;Handset Reference&quot;).ToString&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = &quot;The robot copied the cost center from column I: &quot;+row(&quot;Allocation Code 1/ CC&quot;).ToString+&quot;.&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;Else If String.IsNullOrWhiteSpace(row(&quot;Allocation Code 2&quot;).tostring)&#xA;&#x9;&#x9;console.WriteLine( &quot;The robot copied the cost center from column I from the row above: &quot;+io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;Allocation Code 1/ CC&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;row(&quot;CC identified&quot;) = io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;CC identified&quot;).ToString&#xA;&#x9;&#x9;row(&quot;Name identified&quot;) = io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;Name identified&quot;).ToString&#xA;&#x9;&#x9;If  io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;CC Comments&quot;).ToString = &quot;The robot can't extract cost center and name due to missing data.&quot;&#x9;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = &quot;The robot can't extract cost center and name due to missing data.&quot;&#x9;&#xA;&#x9;&#x9;Else&#x9;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = &quot;The robot copied the cost center from column I from the row above: &quot;+If(String.IsNullOrWhiteSpace(io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;Allocation Code 1/ CC&quot;).ToString),io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;CC identified&quot;).ToString,io_dtWorkings.Rows(io_dtWorkings.Rows.IndexOf(row)-1)(&quot;Allocation Code 1/ CC&quot;).ToString)+&quot;.&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;End If&#xA;End If&#xA;End If&#xA;If Not String.IsNullOrWhiteSpace(row(&quot;CC identified&quot;).ToString)&#xA;&#x9;Select Case row(&quot;CC identified&quot;).ToString.Substring(0, 2)&#xA;&#x9;&#x9;Case &quot;16&quot;&#xA;       &#x9;&#x9;row(&quot;CC identified&quot;) = &quot;160200&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;   &#x9;&#x9;Case &quot;17&quot;&#xA;       &#x9;&#x9;row(&quot;CC identified&quot;) = &quot;170200&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;   &#x9;&#x9;Case &quot;H1&quot;&#xA;       &#x9;&#x9;row(&quot;CC identified&quot;) = &quot;H10000&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;    &#x9;Case &quot;H2&quot;&#xA;        &#x9;row(&quot;CC identified&quot;) = &quot;H20100&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;Case &quot;H3&quot;&#xA;       &#x9;&#x9;row(&quot;CC identified&quot;) = &quot;H30100&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;Case &quot;G1&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC identified&quot;) = &quot;G10200&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;Case Else&#xA;&#x9;End Select&#xA;&#xA;&#x9;Select Case row(&quot;CC identified&quot;).ToString&#xA;    &#x9;Case &quot;990244&quot;&#xA;        &#x9;row(&quot;CC identified&quot;) = &quot;990003&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;    &#x9;Case &quot;990010&quot;&#xA;         &#x9;row(&quot;CC identified&quot;) = &quot;990210&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;    &#x9;Case &quot;990098&quot;&#xA;        &#x9;row(&quot;CC identified&quot;) = &quot;990011&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;    &#x9;Case &quot;990051&quot;&#xA;        &#x9;row(&quot;CC identified&quot;) = &quot;990077&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;Case &quot;181070&quot;&#xA;         &#x9;row(&quot;CC identified&quot;) = &quot;180211&quot;&#xA;&#x9;&#x9;&#x9;row(&quot;CC comments&quot;) = If(String.IsNullOrWhiteSpace(row(&quot;CC comments&quot;).ToString),&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;,row(&quot;CC Comments&quot;).tostring +&quot;The robot replaced the cost center to &quot;+row(&quot;CC identified&quot;).ToString+&quot;.&quot;)&#xA;&#x9;&#x9;Case Else&#xA;&#x9;End Select&#xA;End If&#xA;&#xA;Next&#xA;" DisplayName="Populate CC identified, Name identified and CC comments" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
          <ui:InvokeCode.Arguments>
            <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtWorkings">[dtWorkings]</InOutArgument>
            <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtActiveList">[dtActiveList]</InArgument>
            <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtTracker">[dtTracker]</InArgument>
          </ui:InvokeCode.Arguments>
        </ui:InvokeCode>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,160.8" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Throw DisplayName="Throw Inner Exception" Exception="[new SystemException(exception.InnerException.Message)]" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_1" />
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - Data Received" sap:VirtualizedContainerService.HintSize="513.6,309.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_4" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_strTemplatePath]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,200" sap2010:WorkflowViewState.IdRef="Sequence_6">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelWriteRange AddHeaders="False" DataTable="[dtWorkings.DefaultView.ToTable(False, &quot;CC Identified&quot;, &quot;Name identified&quot;, &quot;CC Comments&quot;)]" DisplayName="Write Range - Columns S, T and U" sap:VirtualizedContainerService.HintSize="387.2,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_2" SheetName="[in_Config(&quot;VodafoneWorkingsSheetName&quot;).ToString]" StartingCell="[in_Config(&quot;VodafoneWorkingsCostCenterRange&quot;).ToString]" />
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <Assign DisplayName="Get invoice date" sap:VirtualizedContainerService.HintSize="513.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_15">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_strInvoiceDate]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[dtWorkings.Rows(0)(4).ToString]</InArgument>
      </Assign.Value>
    </Assign>
    <If Condition="[dtWorkings.AsEnumerable().Any(Function(row) String.IsNullOrWhiteSpace(row(&quot;CC identified&quot;).ToString()) AndAlso Not String.IsNullOrEmpty(row(&quot;Order Date&quot;).ToString())) = true]" DisplayName="If Missing CCs found" sap:VirtualizedContainerService.HintSize="513.6,1154.4" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="480,485.6" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="436.8,396" sap2010:WorkflowViewState.IdRef="TryCatch_2">
            <TryCatch.Try>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="System.Text.StringBuilder htmlBuilder = new System.Text.StringBuilder();&#xA;&#xA;htmlBuilder.Append(@&quot;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang='en'&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset='UTF-8'&gt;&#xA;    &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;&#xA;    &lt;title&gt;Missing CC Identification&lt;/title&gt;&#xA;    &lt;style&gt;&#xA;        table {&#xA;            border-collapse: collapse;&#xA;            width: 100%;&#xA;        }&#xA;        th, td {&#xA;            border: 1px solid #ddd;&#xA;            padding: 8px;&#xA;            text-align: left;&#xA;        }&#xA;        th {&#xA;            background-color: #f2f2f2;&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;p&gt;Hi,&lt;/p&gt;&#xA;&#x9;&lt;p&gt;Attached you will find the Journal the robot has prepared.&lt;/p&gt;&#xA;    &lt;p&gt;See below the order dates for which a cost center and/or a name couldn't be extracted for &lt;strong&gt;Vodafone Equipment recharges&lt;/strong&gt;:&lt;/p&gt;&#xA;    &lt;table&gt;&#xA;        &lt;tr&gt;&#xA;            &lt;th&gt;Order Date&lt;/th&gt;&#xA;        &lt;/tr&gt;&quot;);&#xA;&#xA;foreach (System.Data.DataRow row in dtMissingCC.Rows)&#xA;{&#xA;    htmlBuilder.Append($@&quot;&#xA;        &lt;tr&gt;&#xA;            &lt;td&gt;{row[&quot;Order Date&quot;]}&lt;/td&gt;&#xA;        &lt;/tr&gt;&quot;);&#xA;}&#xA;&#xA;htmlBuilder.Append(@&quot;&#xA;    &lt;/table&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&quot;);&#xA;&#xA;string htmlEmailContent = htmlBuilder.ToString();&#xA;&#xA;strMailBody = htmlEmailContent;" DisplayName="Invoke Code - Create Mail Body" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_3" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="dtMissingCC">
                    <VisualBasicValue x:TypeArguments="sd:DataTable" ExpressionText="dtWorkings.AsEnumerable().Where(Function(row) String.IsNullOrWhiteSpace(row(&quot;CC identified&quot;).ToString()) AndAlso Not String.IsNullOrEmpty(row(&quot;Order Date&quot;).ToString())).CopyToDataTable().DefaultView.ToTable(True, &quot;Order Date&quot;)" />
                  </InArgument>
                  <InOutArgument x:TypeArguments="x:String" x:Key="strMailBody">
                    <VisualBasicReference x:TypeArguments="x:String" ExpressionText="out_strMailBody" />
                  </InOutArgument>
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <Throw DisplayName="Throw Inner Exception" Exception="[new SystemException(exception.InnerException.Message)]" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_2" />
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="480,485.6" sap2010:WorkflowViewState.IdRef="Sequence_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="436.8,396" sap2010:WorkflowViewState.IdRef="TryCatch_3">
            <TryCatch.Try>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="System.Text.StringBuilder htmlBuilder = new System.Text.StringBuilder();&#xA;&#xA;htmlBuilder.Append(@&quot;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang='en'&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset='UTF-8'&gt;&#xA;    &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;&#xA;    &lt;style&gt;&#xA;        th, td {&#xA;            border: 1px solid #ddd;&#xA;            padding: 8px;&#xA;            text-align: left;&#xA;        }&#xA;        th {&#xA;            background-color: #f2f2f2;&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;p&gt;Hi,&lt;/p&gt;&#xA;&#x9;&lt;p&gt;Attached you will find the Journal the robot has prepared.&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&quot;);&#xA;string htmlEmailContent = htmlBuilder.ToString();&#xA;&#xA;strMailBody = htmlEmailContent;" DisplayName="Invoke Code - Create Mail Body" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_4" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="strMailBody">
                    <VisualBasicReference x:TypeArguments="x:String" ExpressionText="out_strMailBody" />
                  </InOutArgument>
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </Sequence>
      </If.Else>
    </If>
  </Sequence>
</Activity>